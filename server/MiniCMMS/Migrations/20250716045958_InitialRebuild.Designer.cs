// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MiniCMMS.Data;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace MiniCMMS.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250716045958_InitialRebuild")]
    partial class InitialRebuild
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("MiniCMMS.Models.Asset", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("LastMaintained")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Assets");
                });

            modelBuilder.Entity("MiniCMMS.Models.MaintenanceTask", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AssetId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CompletedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("CreatedById")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Priority")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("ScheduledDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("AssetId");

                    b.HasIndex("CreatedById");

                    b.ToTable("MaintenanceTasks");
                });

            modelBuilder.Entity("MiniCMMS.Models.TasksAssignment", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.Property<int>("MaintenanceTaskId")
                        .HasColumnType("integer");

                    b.Property<int?>("TechnicianId")
                        .HasColumnType("integer");

                    b.HasKey("UserId", "MaintenanceTaskId");

                    b.HasIndex("MaintenanceTaskId");

                    b.HasIndex("TechnicianId");

                    b.ToTable("TasksAssignments");
                });

            modelBuilder.Entity("MiniCMMS.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UserType")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("character varying(13)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasDiscriminator<string>("UserType").HasValue("User");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("MiniCMMS.Models.Manager", b =>
                {
                    b.HasBaseType("MiniCMMS.Models.User");

                    b.HasDiscriminator().HasValue("Manager");
                });

            modelBuilder.Entity("MiniCMMS.Models.Technician", b =>
                {
                    b.HasBaseType("MiniCMMS.Models.User");

                    b.HasDiscriminator().HasValue("Technician");
                });

            modelBuilder.Entity("MiniCMMS.Models.MaintenanceTask", b =>
                {
                    b.HasOne("MiniCMMS.Models.Asset", "Asset")
                        .WithMany("MaintenanceTasks")
                        .HasForeignKey("AssetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MiniCMMS.Models.Manager", "CreatedBy")
                        .WithMany("TasksCreated")
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Asset");

                    b.Navigation("CreatedBy");
                });

            modelBuilder.Entity("MiniCMMS.Models.TasksAssignment", b =>
                {
                    b.HasOne("MiniCMMS.Models.MaintenanceTask", "MaintenanceTask")
                        .WithMany("AssignedUsers")
                        .HasForeignKey("MaintenanceTaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MiniCMMS.Models.Technician", null)
                        .WithMany("AssignedTasks")
                        .HasForeignKey("TechnicianId");

                    b.HasOne("MiniCMMS.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MaintenanceTask");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MiniCMMS.Models.Asset", b =>
                {
                    b.Navigation("MaintenanceTasks");
                });

            modelBuilder.Entity("MiniCMMS.Models.MaintenanceTask", b =>
                {
                    b.Navigation("AssignedUsers");
                });

            modelBuilder.Entity("MiniCMMS.Models.Manager", b =>
                {
                    b.Navigation("TasksCreated");
                });

            modelBuilder.Entity("MiniCMMS.Models.Technician", b =>
                {
                    b.Navigation("AssignedTasks");
                });
#pragma warning restore 612, 618
        }
    }
}
